package miReproductor;

import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javazoom.jlgui.basicplayer.BasicController;
import javazoom.jlgui.basicplayer.BasicPlayerEvent;
import javazoom.jlgui.basicplayer.BasicPlayerException;
import javazoom.jlgui.basicplayer.BasicPlayerListener;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.stage.Stage;

/**
 * @author Ruben Prieto
 */

public class Inicio extends javax.swing.JFrame implements BasicPlayerListener{
    private ArrayList<String> canciones=new ArrayList<>();
    private ArrayList<String> playlists= new ArrayList<>();
    
    public static float ecualizador[] = new float[10];
    public static float eqFloat[] = new float[32];
    public int eqPersonalizado[] = new int[10];
    
    String rutas[];
    String rutasPlaylists[];
    
    public ReproductorAudio myReproductorAudio;
    public ReproductorVideo myReproductorVideo;
    public Ecualizador myEcualizador;
    
    int cancionActual, tama;
    float antVolumen;
    int numPlaylists;
    int actualPlaylist;
    int actualPreset;
    
    public Inicio() {
        
        initComponents();
        this.setLocationRelativeTo(null);   

        myReproductorAudio = new ReproductorAudio(this);
        myReproductorAudio.player.addBasicPlayerListener(this);
        try {
            myReproductorAudio.setVolumen(jVolumenSlider.getValue());
        } catch (BasicPlayerException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
        myReproductorAudio.volumenActual = jVolumenSlider.getValue();
        cancionActual=0;
        actualPlaylist=-1;
        actualPreset=0;

        inicializaEcualizador();
        inicializaPlaylists();
        inicializaNombrePlaylists();
        inicializaBotones();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPlayButton = new javax.swing.JButton();
        jStopButton = new javax.swing.JButton();
        jSiguienteButton = new javax.swing.JButton();
        jAnteriorButton = new javax.swing.JButton();
        jVolumenSlider = new javax.swing.JSlider();
        jTiempo2Label = new javax.swing.JLabel();
        jTiempo1Label = new javax.swing.JLabel();
        jAleatorioToggleButton = new javax.swing.JToggleButton();
        jRepetirToggleButton = new javax.swing.JToggleButton();
        jMuteToggleButton = new javax.swing.JToggleButton();
        jProgresoSlider = new javax.swing.JSlider();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabelPlaylist = new javax.swing.JLabel();
        jLabelNoCanciones = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabelNumeroCanciones = new javax.swing.JLabel();
        jPausaButton = new javax.swing.JButton();
        jLabelTitulo = new javax.swing.JLabel();
        jLabelArtista = new javax.swing.JLabel();
        jLabelAlbum = new javax.swing.JLabel();
        jLabelAnio = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jArchivoMenu = new javax.swing.JMenu();
        jAbrirCancionMenuItem = new javax.swing.JMenuItem();
        jAbrirCarpetaMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jAbrirVideoMenuItem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        jAgregarCancionMenuItem = new javax.swing.JMenuItem();
        jAgregarCarpetaMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jSalirMenuItem = new javax.swing.JMenuItem();
        jReproduccionMenu = new javax.swing.JMenu();
        jMenuReproducir = new javax.swing.JMenuItem();
        jMenuPausa = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuSiguiente = new javax.swing.JMenuItem();
        jMenuAnterior = new javax.swing.JMenuItem();
        jMenuStop = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jCheckBoxMenuAleatorio = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuRepetir = new javax.swing.JCheckBoxMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jCheckBoxMenuMute = new javax.swing.JCheckBoxMenuItem();
        jMenuSubirVolumen = new javax.swing.JMenuItem();
        jMenuBajarVolumen = new javax.swing.JMenuItem();
        jPlaylistMenu = new javax.swing.JMenu();
        jMenuPlayDef = new javax.swing.JMenuItem();
        jMenuPlay1 = new javax.swing.JMenuItem();
        jMenuPlay2 = new javax.swing.JMenuItem();
        jMenuPlay3 = new javax.swing.JMenuItem();
        jMenuPlay4 = new javax.swing.JMenuItem();
        jMenuPlay5 = new javax.swing.JMenuItem();
        jMenuPlay6 = new javax.swing.JMenuItem();
        jMenuPlay7 = new javax.swing.JMenuItem();
        jMenuPlay8 = new javax.swing.JMenuItem();
        jMenuPlay9 = new javax.swing.JMenuItem();
        jEditarFormatoMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setFocusable(false);
        jTable1.setRequestFocusEnabled(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 60, 260, 250));

        jPlayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/play.png"))); // NOI18N
        jPlayButton.setToolTipText("Reproducir");
        jPlayButton.setBorderPainted(false);
        jPlayButton.setContentAreaFilled(false);
        jPlayButton.setFocusPainted(false);
        jPlayButton.setFocusable(false);
        jPlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPlayButtonActionPerformed(evt);
            }
        });
        getContentPane().add(jPlayButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 420, 70, 70));

        jStopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/stop.png"))); // NOI18N
        jStopButton.setToolTipText("Stop");
        jStopButton.setBorderPainted(false);
        jStopButton.setContentAreaFilled(false);
        jStopButton.setFocusPainted(false);
        jStopButton.setFocusable(false);
        jStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStopButtonActionPerformed(evt);
            }
        });
        getContentPane().add(jStopButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 420, 70, 70));

        jSiguienteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/siguiente.png"))); // NOI18N
        jSiguienteButton.setToolTipText("Siguiente");
        jSiguienteButton.setActionCommand("Siguiente");
        jSiguienteButton.setBorderPainted(false);
        jSiguienteButton.setContentAreaFilled(false);
        jSiguienteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSiguienteButton.setFocusPainted(false);
        jSiguienteButton.setFocusable(false);
        jSiguienteButton.setVerifyInputWhenFocusTarget(false);
        jSiguienteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSiguienteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(jSiguienteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 420, 70, 70));
        jSiguienteButton.getAccessibleContext().setAccessibleDescription("");

        jAnteriorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/atras.png"))); // NOI18N
        jAnteriorButton.setToolTipText("Anterior");
        jAnteriorButton.setBorderPainted(false);
        jAnteriorButton.setContentAreaFilled(false);
        jAnteriorButton.setFocusable(false);
        jAnteriorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAnteriorButtonActionPerformed(evt);
            }
        });
        getContentPane().add(jAnteriorButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 420, 70, 70));

        jVolumenSlider.setValue(100);
        jVolumenSlider.setFocusable(false);
        jVolumenSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jVolumenSliderStateChanged(evt);
            }
        });
        getContentPane().add(jVolumenSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 450, 96, 30));

        jTiempo2Label.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jTiempo2Label.setForeground(new java.awt.Color(255, 255, 255));
        jTiempo2Label.setText("00:00");
        jTiempo2Label.setFocusable(false);
        getContentPane().add(jTiempo2Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 390, 30, 20));

        jTiempo1Label.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jTiempo1Label.setForeground(new java.awt.Color(255, 255, 255));
        jTiempo1Label.setText("00:00");
        jTiempo1Label.setFocusable(false);
        getContentPane().add(jTiempo1Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, -1, 20));

        jAleatorioToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/aleatorio.png"))); // NOI18N
        jAleatorioToggleButton.setToolTipText("Modo aleatorio");
        jAleatorioToggleButton.setBorderPainted(false);
        jAleatorioToggleButton.setContentAreaFilled(false);
        jAleatorioToggleButton.setFocusable(false);
        jAleatorioToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAleatorioToggleButtonActionPerformed(evt);
            }
        });
        getContentPane().add(jAleatorioToggleButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 40, 40));

        jRepetirToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/repetir.png"))); // NOI18N
        jRepetirToggleButton.setToolTipText("Repetir Cancion");
        jRepetirToggleButton.setBorderPainted(false);
        jRepetirToggleButton.setContentAreaFilled(false);
        jRepetirToggleButton.setFocusable(false);
        jRepetirToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRepetirToggleButtonActionPerformed(evt);
            }
        });
        getContentPane().add(jRepetirToggleButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 440, 40, 40));

        jMuteToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/volumen3.png"))); // NOI18N
        jMuteToggleButton.setToolTipText("Volumen");
        jMuteToggleButton.setBorderPainted(false);
        jMuteToggleButton.setContentAreaFilled(false);
        jMuteToggleButton.setFocusPainted(false);
        jMuteToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMuteToggleButtonActionPerformed(evt);
            }
        });
        getContentPane().add(jMuteToggleButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 450, 40, 30));

        jProgresoSlider.setValue(0);
        jProgresoSlider.setFocusable(false);
        jProgresoSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jProgresoSliderMouseClicked(evt);
            }
        });
        getContentPane().add(jProgresoSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 390, 550, -1));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/importarListaPrincipal.png"))); // NOI18N
        jButton1.setToolTipText("Guardar lista principal aquí");
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusPainted(false);
        jButton1.setFocusable(false);
        jButton1.setRequestFocusEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 110, 70, -1));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/añadirCancionLista.png"))); // NOI18N
        jButton2.setToolTipText("Añadir Cancion a la lista");
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setFocusPainted(false);
        jButton2.setFocusable(false);
        jButton2.setRequestFocusEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 310, 70, 70));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/repLista.png"))); // NOI18N
        jButton3.setToolTipText("Reproducir Lista");
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.setFocusPainted(false);
        jButton3.setFocusable(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 320, 60, 60));

        jLabelPlaylist.setFont(new java.awt.Font("Dialog", 1, 19)); // NOI18N
        jLabelPlaylist.setForeground(new java.awt.Color(255, 255, 255));
        jLabelPlaylist.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPlaylist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelPlaylistMouseClicked(evt);
            }
        });
        getContentPane().add(jLabelPlaylist, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 260, 28));

        jLabelNoCanciones.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabelNoCanciones.setForeground(new java.awt.Color(255, 255, 255));
        jLabelNoCanciones.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabelNoCanciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 0, 260, 22));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/borraLista.png"))); // NOI18N
        jButton4.setToolTipText("Borrar Playlist");
        jButton4.setBorderPainted(false);
        jButton4.setContentAreaFilled(false);
        jButton4.setFocusPainted(false);
        jButton4.setFocusable(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 200, 70, 60));

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ecualizador.png"))); // NOI18N
        jButton5.setToolTipText("Ecualizador");
        jButton5.setBorderPainted(false);
        jButton5.setContentAreaFilled(false);
        jButton5.setFocusPainted(false);
        jButton5.setRequestFocusEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 440, 40, 40));

        jLabelNumeroCanciones.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabelNumeroCanciones.setForeground(new java.awt.Color(255, 255, 255));
        jLabelNumeroCanciones.setText("Numero de canciones: ");
        jLabelNumeroCanciones.setFocusable(false);
        getContentPane().add(jLabelNumeroCanciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 420, 160, -1));

        jPausaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/pause.png"))); // NOI18N
        jPausaButton.setToolTipText("Pausa");
        jPausaButton.setBorderPainted(false);
        jPausaButton.setContentAreaFilled(false);
        jPausaButton.setFocusable(false);
        jPausaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPausaButtonActionPerformed(evt);
            }
        });
        getContentPane().add(jPausaButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 420, 70, 70));

        jLabelTitulo.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelTitulo.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTitulo.setText("Título: ");
        getContentPane().add(jLabelTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 290, 30));

        jLabelArtista.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelArtista.setForeground(new java.awt.Color(255, 255, 255));
        jLabelArtista.setText("Artista: ");
        getContentPane().add(jLabelArtista, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 290, 30));

        jLabelAlbum.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelAlbum.setForeground(new java.awt.Color(255, 255, 255));
        jLabelAlbum.setText("Álbum: ");
        getContentPane().add(jLabelAlbum, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 290, 30));

        jLabelAnio.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelAnio.setForeground(new java.awt.Color(255, 255, 255));
        jLabelAnio.setText("Año: ");
        getContentPane().add(jLabelAnio, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 290, 30));

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/abrirCarpeta.png"))); // NOI18N
        jButton6.setToolTipText("Agregar Carpeta a la lista");
        jButton6.setBorderPainted(false);
        jButton6.setContentAreaFilled(false);
        jButton6.setDefaultCapable(false);
        jButton6.setFocusPainted(false);
        jButton6.setFocusable(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 320, 70, 70));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo1.jpg"))); // NOI18N
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 650, 520));

        jArchivoMenu.setText("Archivo");

        jAbrirCancionMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jAbrirCancionMenuItem.setText("Abrir Canción");
        jAbrirCancionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAbrirCancionMenuItemActionPerformed(evt);
            }
        });
        jArchivoMenu.add(jAbrirCancionMenuItem);

        jAbrirCarpetaMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jAbrirCarpetaMenuItem.setText("Abrir Carpeta");
        jAbrirCarpetaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAbrirCarpetaMenuItemActionPerformed(evt);
            }
        });
        jArchivoMenu.add(jAbrirCarpetaMenuItem);
        jArchivoMenu.add(jSeparator2);

        jAbrirVideoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jAbrirVideoMenuItem.setText("Abrir Video");
        jAbrirVideoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAbrirVideoMenuItemActionPerformed(evt);
            }
        });
        jArchivoMenu.add(jAbrirVideoMenuItem);
        jArchivoMenu.add(jSeparator7);

        jAgregarCancionMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jAgregarCancionMenuItem.setText("Agregar Canción");
        jAgregarCancionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAgregarCancionMenuItemActionPerformed(evt);
            }
        });
        jArchivoMenu.add(jAgregarCancionMenuItem);

        jAgregarCarpetaMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jAgregarCarpetaMenuItem.setText("Agregar Carpeta");
        jAgregarCarpetaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAgregarCarpetaMenuItemActionPerformed(evt);
            }
        });
        jArchivoMenu.add(jAgregarCarpetaMenuItem);
        jArchivoMenu.add(jSeparator1);
        jArchivoMenu.add(jSeparator6);

        jSalirMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jSalirMenuItem.setText("Salir");
        jSalirMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSalirMenuItemActionPerformed(evt);
            }
        });
        jArchivoMenu.add(jSalirMenuItem);

        jMenuBar1.add(jArchivoMenu);

        jReproduccionMenu.setText("Reproducción");

        jMenuReproducir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuReproducir.setText("Reproducir");
        jMenuReproducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuReproducirActionPerformed(evt);
            }
        });
        jReproduccionMenu.add(jMenuReproducir);

        jMenuPausa.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuPausa.setText("Pausa");
        jMenuPausa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPausaActionPerformed(evt);
            }
        });
        jReproduccionMenu.add(jMenuPausa);
        jReproduccionMenu.add(jSeparator3);

        jMenuSiguiente.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_RIGHT, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuSiguiente.setText("Siguiente");
        jMenuSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSiguienteActionPerformed(evt);
            }
        });
        jReproduccionMenu.add(jMenuSiguiente);

        jMenuAnterior.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_LEFT, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuAnterior.setText("Anterior");
        jMenuAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAnteriorActionPerformed(evt);
            }
        });
        jReproduccionMenu.add(jMenuAnterior);

        jMenuStop.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuStop.setText("Stop");
        jMenuStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuStopActionPerformed(evt);
            }
        });
        jReproduccionMenu.add(jMenuStop);
        jReproduccionMenu.add(jSeparator4);

        jCheckBoxMenuAleatorio.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jCheckBoxMenuAleatorio.setText("Aleatorio");
        jCheckBoxMenuAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuAleatorioActionPerformed(evt);
            }
        });
        jReproduccionMenu.add(jCheckBoxMenuAleatorio);

        jCheckBoxMenuRepetir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jCheckBoxMenuRepetir.setText("Repetir");
        jCheckBoxMenuRepetir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuRepetirActionPerformed(evt);
            }
        });
        jReproduccionMenu.add(jCheckBoxMenuRepetir);
        jReproduccionMenu.add(jSeparator5);

        jCheckBoxMenuMute.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jCheckBoxMenuMute.setText("Mute");
        jCheckBoxMenuMute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuMuteActionPerformed(evt);
            }
        });
        jReproduccionMenu.add(jCheckBoxMenuMute);

        jMenuSubirVolumen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_UP, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuSubirVolumen.setText("Subir Volumen");
        jMenuSubirVolumen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSubirVolumenActionPerformed(evt);
            }
        });
        jReproduccionMenu.add(jMenuSubirVolumen);

        jMenuBajarVolumen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DOWN, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuBajarVolumen.setText("Bajar Volumen");
        jMenuBajarVolumen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuBajarVolumenActionPerformed(evt);
            }
        });
        jReproduccionMenu.add(jMenuBajarVolumen);

        jMenuBar1.add(jReproduccionMenu);

        jPlaylistMenu.setText("Play Lists");

        jMenuPlayDef.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuPlayDef.setText("Lista por defecto");
        jMenuPlayDef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPlayDefActionPerformed(evt);
            }
        });
        jPlaylistMenu.add(jMenuPlayDef);

        jMenuPlay1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuPlay1.setText("Playlist 1");
        jMenuPlay1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPlay1ActionPerformed(evt);
            }
        });
        jPlaylistMenu.add(jMenuPlay1);

        jMenuPlay2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuPlay2.setText("Playlist 2");
        jMenuPlay2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPlay2ActionPerformed(evt);
            }
        });
        jPlaylistMenu.add(jMenuPlay2);

        jMenuPlay3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuPlay3.setText("Playlist 3");
        jMenuPlay3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPlay3ActionPerformed(evt);
            }
        });
        jPlaylistMenu.add(jMenuPlay3);

        jMenuPlay4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuPlay4.setText("Playlist 4");
        jMenuPlay4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPlay4ActionPerformed(evt);
            }
        });
        jPlaylistMenu.add(jMenuPlay4);

        jMenuPlay5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_5, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuPlay5.setText("Playlist 5");
        jMenuPlay5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPlay5ActionPerformed(evt);
            }
        });
        jPlaylistMenu.add(jMenuPlay5);

        jMenuPlay6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_6, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuPlay6.setText("Playlist 6");
        jMenuPlay6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPlay6ActionPerformed(evt);
            }
        });
        jPlaylistMenu.add(jMenuPlay6);

        jMenuPlay7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_7, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuPlay7.setText("Playlist 7");
        jMenuPlay7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPlay7ActionPerformed(evt);
            }
        });
        jPlaylistMenu.add(jMenuPlay7);

        jMenuPlay8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_8, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuPlay8.setText("Playlist 8");
        jMenuPlay8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPlay8ActionPerformed(evt);
            }
        });
        jPlaylistMenu.add(jMenuPlay8);

        jMenuPlay9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_9, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuPlay9.setText("Playlist 9");
        jMenuPlay9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPlay9ActionPerformed(evt);
            }
        });
        jPlaylistMenu.add(jMenuPlay9);

        jMenuBar1.add(jPlaylistMenu);

        jEditarFormatoMenu.setText("Editar Formato");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Cambiar Formato a MP3");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jEditarFormatoMenu.add(jMenuItem2);

        jMenuBar1.add(jEditarFormatoMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>                        

    private void jAbrirCancionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        String[] formatoDisponible = {"mp3"};
        rutas=Funciones.abrirArchivo("Archivos con extension MP3",formatoDisponible);
        
        if(rutas!=null){
            try {
                canciones.clear();
                canciones.addAll(Arrays.asList(rutas));
                myReproductorAudio.AbrirFichero(rutas[0]);
                cancionActual=0;
                actualPlaylist=-1;
                visibleBotonesPlaylists(false);
                
                jPlayButton.setEnabled(true);
                jStopButton.setEnabled(true);
                jAnteriorButton.setEnabled(false);
                jSiguienteButton.setEnabled(false);
                
                jAgregarCancionMenuItem.setEnabled(true);
                jAgregarCarpetaMenuItem.setEnabled(true);

                jMenuAnterior.setEnabled(false);
                jMenuSiguiente.setEnabled(false);
                jMenuReproducir.setEnabled(true);
                jMenuStop.setEnabled(true);
                
                visiblePlayPausa(2);
                jLabelPlaylist.setText(jMenuPlayDef.getText());
                cambiaBotonesPlaylists(actualPlaylist);
                
                myReproductorAudio.Play();
                
            } catch (Exception ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
                if(canciones.size()>0){
                    llenarTabla();
                    jTable1.setRowSelectionInterval(cancionActual,cancionActual);
                }
        }
    }                                                     

    private void jPlayButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        try {
            if(!canciones.isEmpty()){
                myReproductorAudio.Play();
                
                jStopButton.setEnabled(true);
                if(canciones.size() != 1){
                    jSiguienteButton.setEnabled(true);
                }
                visiblePlayPausa(2);
            }
        } catch (Exception ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                           

    private void jPausaButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        try {
            myReproductorAudio.Pausa();
            visiblePlayPausa(1);
            
        } catch (Exception ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                            

    private void jStopButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        try {
            stopCancion();
            jStopButton.setEnabled(false);
            //jSiguienteButton.setEnabled(false);
            visiblePlayPausa(1);
        } catch (Exception ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                           

    private void jSiguienteButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        try {
            if(jRepetirToggleButton.isSelected()){
                repetirCancion();
            }else if(jAleatorioToggleButton.isSelected()){
                cancionAleatoria();
            }else if(!canciones.isEmpty()){
                siguienteCancion();
            }
        } catch (Exception ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                                

    private void jAnteriorButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        try {
            if(jRepetirToggleButton.isSelected()){
                repetirCancion();
            }else if(jAleatorioToggleButton.isSelected()){
                cancionAleatoria();
            }else if(cancionActual != 0){
                anteriorCancion();
            }
        } catch (Exception ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                               

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
        if(evt.getClickCount() == 2 && evt.getButton()==MouseEvent.BUTTON1){
            cancionActual = jTable1.getSelectedRow();
            try {
                if(actualPlaylist != -1){
                    
                    actualPlaylist = -1;
                    jLabelPlaylist.setText(jMenuPlayDef.getText());
                    rutas = new String[1];
                    rutas[0] = rutasPlaylists[cancionActual];
                    canciones.clear();
                    canciones.add(rutas[0]);
                    
                    cancionActual = 0;
                    llenarTabla();
                    cambiaBotonesPlaylists(actualPlaylist);
                    reproduceCancion();
                    if(canciones.size() != 0){
                        jTable1.setRowSelectionInterval(cancionActual,cancionActual);
                        jPlayButton.setEnabled(true);
                        jStopButton.setEnabled(true);
                        jMenuStop.setEnabled(true);
                        jAgregarCancionMenuItem.setEnabled(true);
                        jAgregarCarpetaMenuItem.setEnabled(true);
                    }
                    
                }else{
                    jTable1.setRowSelectionInterval(cancionActual,cancionActual);
                    reproduceCancion();
                }
                
                if(canciones.size() == 0){
                    inicializaBotones();
                    actualizaDatosCancion();
                }else{
                    if(cancionActual == canciones.size()-1){
                        jSiguienteButton.setEnabled(false);
                        jAnteriorButton.setEnabled(true);
                    }else{
                        jSiguienteButton.setEnabled(true);
                    }
                    
                    if(cancionActual == 0){
                        jAnteriorButton.setEnabled(false);
                        jSiguienteButton.setEnabled(true);
                    }else{
                        jAnteriorButton.setEnabled(true);
                    }
                    
                    if(canciones.size() == 1){
                        jAnteriorButton.setEnabled(false);
                        jSiguienteButton.setEnabled(false);
                    }
                    
                    jStopButton.setEnabled(true);
                }
                
            } catch (Exception ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }                                    

    private void jVolumenSliderStateChanged(javax.swing.event.ChangeEvent evt) {                                            
        try {
            if(jVolumenSlider.getValue() == 0){
                jMuteToggleButton.setSelected(true);
                jCheckBoxMenuMute.setSelected(true);
                jMuteToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/volumen0.png")));
            }else{
                jCheckBoxMenuMute.setSelected(false);
                jReproduccionMenu.setSelected(false);
                
                if(jVolumenSlider.getValue() > 0 && jVolumenSlider.getValue() < 30){
                    jMuteToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/volumen1.png")));
                }else if(jVolumenSlider.getValue() >=30 && jVolumenSlider.getValue() < 70){
                    jMuteToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/volumen2.png")));
                }else if(jVolumenSlider.getValue() >=70 && jVolumenSlider.getValue() <= 100){
                    jMuteToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/volumen3.png")));
                }
            }
            myReproductorAudio.setVolumen((float)jVolumenSlider.getValue()/(float)jVolumenSlider.getMaximum());
        } catch (BasicPlayerException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                           

    private void jAbrirCarpetaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        rutas=Funciones.abrirCarpeta();
        
        if(rutas != null){
            try {
                canciones.clear();
                canciones.addAll(Arrays.asList(rutas));
                myReproductorAudio.AbrirFichero(rutas[0]);
                cancionActual=0;
                actualPlaylist=-1;
                visibleBotonesPlaylists(false);
                
                jPlayButton.setEnabled(true);
                jStopButton.setEnabled(true);
                jSiguienteButton.setEnabled(true);
                jAgregarCancionMenuItem.setEnabled(true);
                jAgregarCarpetaMenuItem.setEnabled(true);
                jMenuSiguiente.setEnabled(true);
                jMenuReproducir.setEnabled(true);
                jMenuStop.setEnabled(true);
                visiblePlayPausa(2);
                jLabelPlaylist.setText(jMenuPlayDef.getText());
                cambiaBotonesPlaylists(actualPlaylist);
                
                myReproductorAudio.Play();
                
            } catch (Exception ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
                if(canciones.size()>0){
                    llenarTabla();
                    jTable1.setRowSelectionInterval(cancionActual,cancionActual);
                }   

        }
        
    }                                                     

    private void jSalirMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                               
        System.exit(0);
    }                                              

    private void jAgregarCancionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        String aux[] = Funciones.agregarArchivo("Archivos con extension MP3","mp3",rutas);
        
        if(aux!=null){
            try {
                rutas = aux;
                canciones.clear();
                canciones.addAll(Arrays.asList(rutas));
                actualPlaylist=-1;
                visibleBotonesPlaylists(false);
                
                jSiguienteButton.setEnabled(true);
                jMenuSiguiente.setEnabled(true);
                jLabelPlaylist.setText(jMenuPlayDef.getText());
                cambiaBotonesPlaylists(actualPlaylist);
                
            } catch (Exception ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
                if(canciones.size()>0){
                    llenarTabla();
                    jTable1.setRowSelectionInterval(cancionActual,cancionActual);
                }
        }
    }                                                       

    private void jAgregarCarpetaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        String aux[] = Funciones.agregarCarpeta(rutas);
        
        if(aux!=null){
            try {
                
                rutas = aux;
                canciones.clear();
                canciones.addAll(Arrays.asList(rutas));
                actualPlaylist=-1;
                visibleBotonesPlaylists(false);
                
                jSiguienteButton.setEnabled(true);
                jMenuSiguiente.setEnabled(true);
                jLabelPlaylist.setText(jMenuPlayDef.getText());
                cambiaBotonesPlaylists(actualPlaylist);
                
            } catch (Exception ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
                if(canciones.size()>0){
                    llenarTabla();
                    jTable1.setRowSelectionInterval(cancionActual,cancionActual);
                }
        }
    }                                                       

    private void jMuteToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        try {
            if(jMuteToggleButton.isSelected()){
                jCheckBoxMenuMute.setSelected(true);
            }else{
                jCheckBoxMenuMute.setSelected(false);
            }
            
            if(jVolumenSlider.getValue() != 0.0){
                antVolumen = jVolumenSlider.getValue();//guardo el volumen que tenemos
                myReproductorAudio.setVolumen(0);
                jVolumenSlider.setValue(0);
            }else{
                myReproductorAudio.setVolumen(antVolumen/(float)jVolumenSlider.getMaximum());
                jVolumenSlider.setValue((int)antVolumen);
            }
        } catch (BasicPlayerException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                                 

    private void jAleatorioToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        jRepetirToggleButton.setSelected(false);
        jRepetirToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/repetir.png")));
        if(jAleatorioToggleButton.isSelected()){
            jCheckBoxMenuAleatorio.setSelected(true);
            jAleatorioToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/aleatorioS.png")));
        }else{
            jCheckBoxMenuAleatorio.setSelected(false);
            jAleatorioToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/aleatorio.png")));
        }
        jCheckBoxMenuRepetir.setSelected(false);
    }                                                      

    private void jRepetirToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        jAleatorioToggleButton.setSelected(false);
        jAleatorioToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/aleatorio.png")));
        if(jRepetirToggleButton.isSelected()){
            jCheckBoxMenuRepetir.setSelected(true);
            jRepetirToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/repetirS.png")));
        }else{
            jCheckBoxMenuRepetir.setSelected(false);
            jRepetirToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/repetir.png")));
        }
        jCheckBoxMenuAleatorio.setSelected(false);
    }                                                    

    private void jProgresoSliderMouseClicked(java.awt.event.MouseEvent evt) {                                             
        if(myReproductorAudio.player.getStatus() == 0){ //0. Reproduciendo
            double posClick= jProgresoSlider.getMousePosition().getX();
            double avance=(jProgresoSlider.getMaximum()*posClick)/jProgresoSlider.getSize().width;

            try {
                myReproductorAudio.pulsaProgreso(avance);
            } catch (BasicPlayerException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }                                            

    private void jMenuReproducirActionPerformed(java.awt.event.ActionEvent evt) {                                                
        jPlayButton.doClick();
    }                                               

    private void jMenuPausaActionPerformed(java.awt.event.ActionEvent evt) {                                           
        jPausaButton.doClick();
    }                                          

    private void jMenuSiguienteActionPerformed(java.awt.event.ActionEvent evt) {                                               
        jSiguienteButton.doClick();
    }                                              

    private void jMenuAnteriorActionPerformed(java.awt.event.ActionEvent evt) {                                              
        jAnteriorButton.doClick();
    }                                             

    private void jMenuStopActionPerformed(java.awt.event.ActionEvent evt) {                                          
        jStopButton.doClick();
    }                                         

    private void jCheckBoxMenuAleatorioActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        jAleatorioToggleButton.doClick();
    }                                                      

    private void jCheckBoxMenuRepetirActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        jRepetirToggleButton.doClick();
    }                                                    

    private void jCheckBoxMenuMuteActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        jMuteToggleButton.doClick();
    }                                                 

    private void jMenuSubirVolumenActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        jVolumenSlider.setValue(jVolumenSlider.getValue()+3);
    }                                                 

    private void jMenuBajarVolumenActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        jVolumenSlider.setValue(jVolumenSlider.getValue()-3);
    }                                                 

    private void jMenuPlay1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        actualPlaylist=1;
        visibleBotonesPlaylists(true);
        llenarTablaPlayLists(actualPlaylist);
        cambiaBotonesPlaylists(actualPlaylist);
        
        jLabelPlaylist.setText(jMenuPlay1.getText());
        if(jMenuPlay1.getText().equals("Playlist "+actualPlaylist)){
            cambiaNombrePlaylist(2);
        }
    }                                          

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        if(actualPlaylist != -1){
            playlists = canciones;
            rutasPlaylists = new String[playlists.size()];

            for(int i=0; i<playlists.size(); i++){
                rutasPlaylists[i] = playlists.get(i);
            }
            Funciones.escribirPlaylistFich("playlist"+actualPlaylist+".txt", rutasPlaylists);
            llenarTablaPlayLists(actualPlaylist);
            cambiaBotonesPlaylists(actualPlaylist);
        }
    }                                        

    private void jMenuPlay2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        actualPlaylist=2;
        visibleBotonesPlaylists(true);
        cambiaBotonesPlaylists(actualPlaylist);
        llenarTablaPlayLists(actualPlaylist);
        jLabelPlaylist.setText(jMenuPlay2.getText());
        
        if(jMenuPlay2.getText().equals("Playlist "+actualPlaylist)){
            cambiaNombrePlaylist(2);
        }
    }                                          

    private void jMenuPlay3ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        actualPlaylist=3;
        visibleBotonesPlaylists(true);
        cambiaBotonesPlaylists(actualPlaylist);
        llenarTablaPlayLists(actualPlaylist);
        jLabelPlaylist.setText(jMenuPlay3.getText());
        
        if(jMenuPlay3.getText().equals("Playlist "+actualPlaylist)){
            cambiaNombrePlaylist(2);
        }
    }                                          

    private void jMenuPlay4ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        actualPlaylist=4;
        visibleBotonesPlaylists(true);
        cambiaBotonesPlaylists(actualPlaylist);
        llenarTablaPlayLists(actualPlaylist);
        jLabelPlaylist.setText(jMenuPlay4.getText());
        
        if(jMenuPlay4.getText().equals("Playlist "+actualPlaylist)){
            cambiaNombrePlaylist(2);
        }
    }                                          

    private void jMenuPlay5ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        actualPlaylist=5;
        visibleBotonesPlaylists(true);
        cambiaBotonesPlaylists(actualPlaylist);
        llenarTablaPlayLists(actualPlaylist);
        jLabelPlaylist.setText(jMenuPlay5.getText());
        
        if(jMenuPlay5.getText().equals("Playlist "+actualPlaylist)){
            cambiaNombrePlaylist(2);
        }
    }                                          

    private void jMenuPlay6ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        actualPlaylist=6;
        visibleBotonesPlaylists(true);
        cambiaBotonesPlaylists(actualPlaylist);
        llenarTablaPlayLists(actualPlaylist);
        jLabelPlaylist.setText(jMenuPlay6.getText());
        
        if(jMenuPlay6.getText().equals("Playlist "+actualPlaylist)){
            cambiaNombrePlaylist(2);
        }
    }                                          

    private void jMenuPlay7ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        actualPlaylist=7;
        visibleBotonesPlaylists(true);
        cambiaBotonesPlaylists(actualPlaylist);
        llenarTablaPlayLists(actualPlaylist);
        jLabelPlaylist.setText(jMenuPlay7.getText());
        
        if(jMenuPlay7.getText().equals("Playlist "+actualPlaylist)){
            cambiaNombrePlaylist(2);
        }
    }                                          

    private void jMenuPlay8ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        actualPlaylist=8;
        visibleBotonesPlaylists(true);
        cambiaBotonesPlaylists(actualPlaylist);
        llenarTablaPlayLists(actualPlaylist);
        jLabelPlaylist.setText(jMenuPlay8.getText());
        
        if(jMenuPlay8.getText().equals("Playlist "+actualPlaylist)){
            cambiaNombrePlaylist(2);
        }
    }                                          

    private void jMenuPlay9ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        actualPlaylist=9;
        visibleBotonesPlaylists(true);
        cambiaBotonesPlaylists(actualPlaylist);
        llenarTablaPlayLists(actualPlaylist);
        jLabelPlaylist.setText(jMenuPlay9.getText());
        
        if(jMenuPlay9.getText().equals("Playlist "+actualPlaylist)){
            cambiaNombrePlaylist(2);
        }
    }                                          

    private void jMenuPlayDefActionPerformed(java.awt.event.ActionEvent evt) {                                             
        actualPlaylist=-1;
        visibleBotonesPlaylists(false);
        
        llenarTabla();
        if(canciones.size()>0){
            jTable1.setRowSelectionInterval(cancionActual,cancionActual);
        }
        jLabelPlaylist.setText(jMenuPlayDef.getText());
        cambiaBotonesPlaylists(actualPlaylist);
    }                                            

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        if(actualPlaylist != -1){
            actualPlaylist = -1;
            visibleBotonesPlaylists(false);
            
            rutas = rutasPlaylists;
            canciones.clear();
            canciones.addAll(Arrays.asList(rutas));
            llenarTabla();
            jLabelPlaylist.setText(jMenuPlayDef.getText());
            
            try {
                cancionActual=0;
                jPlayButton.setEnabled(true);
                jStopButton.setEnabled(true);
                jSiguienteButton.setEnabled(true);
                jAgregarCancionMenuItem.setEnabled(true);
                jAgregarCarpetaMenuItem.setEnabled(true);
                jMenuSiguiente.setEnabled(true);
                jMenuReproducir.setEnabled(true);
                jMenuStop.setEnabled(true);
                cambiaBotonesPlaylists(actualPlaylist);

                comprobarRutas();
                reproduceCancion();

            } catch (Exception ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        Funciones.aniadirCancionPlaylist("playlist"+actualPlaylist+".txt");
        llenarTablaPlayLists(actualPlaylist);
        cambiaBotonesPlaylists(actualPlaylist);
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        if(actualPlaylist != -1){
            Funciones.borraPlaylist("playlist"+actualPlaylist+".txt");
            llenarTablaPlayLists(actualPlaylist);
            cambiaBotonesPlaylists(actualPlaylist);
            cambiaNombrePlaylist(1);
        }
    }                                        

    private void jLabelPlaylistMouseClicked(java.awt.event.MouseEvent evt) {                                            
        if(actualPlaylist != -1){
            cambiaNombrePlaylist(2);
        }
    }                                           

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        myEcualizador = new Ecualizador(this,actualPreset,myReproductorAudio.balance);
    }                                        

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        Funciones.aniadirCarpetaPlaylist("playlist"+actualPlaylist+".txt");
        llenarTablaPlayLists(actualPlaylist);
        cambiaBotonesPlaylists(actualPlaylist);
    }                                        

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        String[] formatosDisponibles = {"wav", "aac", "ogg", "flac", "m4a", "aiff", "aif", "wma", "amr", "opus"};
        rutas=Funciones.abrirArchivo("Archivos a transformar a MP3", formatosDisponibles);
        
        if(rutas!=null){
            File source = new File(rutas[0]);
            String fileNameWithoutExtension = source.getName().substring(0, source.getName().lastIndexOf('.'));
            
            String userHome = System.getProperty("user.home");
            String downloadsPath = userHome + File.separator + "Downloads";

            File target = new File(downloadsPath + File.separator + fileNameWithoutExtension  + ".mp3");

            Funciones.convertToMP3(source, target);
        }
        
    }                                          

    private void jAbrirVideoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        final JFXPanel fxPanel = new JFXPanel();

        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                Platform.setImplicitExit(false);

                myReproductorVideo = new ReproductorVideo();
                myReproductorVideo.start(new Stage());
            }
        });
    }                                                   

    // Variables declaration - do not modify                     
    private javax.swing.JMenuItem jAbrirCancionMenuItem;
    private javax.swing.JMenuItem jAbrirCarpetaMenuItem;
    private javax.swing.JMenuItem jAbrirVideoMenuItem;
    private javax.swing.JMenuItem jAgregarCancionMenuItem;
    private javax.swing.JMenuItem jAgregarCarpetaMenuItem;
    private javax.swing.JToggleButton jAleatorioToggleButton;
    private javax.swing.JButton jAnteriorButton;
    private javax.swing.JMenu jArchivoMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuAleatorio;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuMute;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuRepetir;
    private javax.swing.JMenu jEditarFormatoMenu;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelAlbum;
    private javax.swing.JLabel jLabelAnio;
    private javax.swing.JLabel jLabelArtista;
    private javax.swing.JLabel jLabelNoCanciones;
    private javax.swing.JLabel jLabelNumeroCanciones;
    private javax.swing.JLabel jLabelPlaylist;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JMenuItem jMenuAnterior;
    private javax.swing.JMenuItem jMenuBajarVolumen;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuPausa;
    private javax.swing.JMenuItem jMenuPlay1;
    private javax.swing.JMenuItem jMenuPlay2;
    private javax.swing.JMenuItem jMenuPlay3;
    private javax.swing.JMenuItem jMenuPlay4;
    private javax.swing.JMenuItem jMenuPlay5;
    private javax.swing.JMenuItem jMenuPlay6;
    private javax.swing.JMenuItem jMenuPlay7;
    private javax.swing.JMenuItem jMenuPlay8;
    private javax.swing.JMenuItem jMenuPlay9;
    private javax.swing.JMenuItem jMenuPlayDef;
    private javax.swing.JMenuItem jMenuReproducir;
    private javax.swing.JMenuItem jMenuSiguiente;
    private javax.swing.JMenuItem jMenuStop;
    private javax.swing.JMenuItem jMenuSubirVolumen;
    private javax.swing.JToggleButton jMuteToggleButton;
    private javax.swing.JButton jPausaButton;
    private javax.swing.JButton jPlayButton;
    private javax.swing.JMenu jPlaylistMenu;
    private javax.swing.JSlider jProgresoSlider;
    private javax.swing.JToggleButton jRepetirToggleButton;
    private javax.swing.JMenu jReproduccionMenu;
    private javax.swing.JMenuItem jSalirMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JButton jSiguienteButton;
    private javax.swing.JButton jStopButton;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel jTiempo1Label;
    private javax.swing.JLabel jTiempo2Label;
    private javax.swing.JSlider jVolumenSlider;
    // End of variables declaration                   

    /**
     * Llena la lista con el nombre de las canciones que se van a reproducir
     * Cambia el numero de la etiqueta del numero de canciones
     * En el caso de que la lista esté vacia, manda el mensaje correspondiente
     */
    private void llenarTabla(){
        DefaultTableModel Modelo =(DefaultTableModel)jTable1.getModel();
        while(Modelo.getRowCount()!=0){
            Modelo.removeRow(0);
        }
        if(canciones.size()>0){
            jLabelNoCanciones.setText("");
            File archivo;
            for(int i=0;i<canciones.size();i++){
                archivo=new File(canciones.get(i));
                Modelo.addRow(new Object[]{archivo.getName().substring(0,archivo.getName().length()-4)});
            }
            jLabelNumeroCanciones.setText("Numero de canciones: "+ Modelo.getRowCount());
        }else{
            jLabelNoCanciones.setText("No hay canciones en la lista principal.");
            jLabelNumeroCanciones.setText("Numero de canciones: "+ Modelo.getRowCount());
        }
    }
    
    /**
     * Al igual que el método anterior, la unica diferencia es:
     * Se le pasa el número de la play list para que poder leer el fichero correspondiente
     * a la lista que contendrá o no canciones
     */
    private void llenarTablaPlayLists(int numPlayList){
        DefaultTableModel Modelo =(DefaultTableModel)jTable1.getModel();
        while(Modelo.getRowCount()!=0){
            Modelo.removeRow(0);
        }
        
        String cancionesPlaylist[] = Funciones.leerFichero("playlist"+numPlayList+".txt");
        rutasPlaylists = cancionesPlaylist;
        
        if(cancionesPlaylist.length > 0){
            jLabelNoCanciones.setText("");
            File archivo;
            for(int i=0;i<cancionesPlaylist.length;i++){
                archivo=new File(cancionesPlaylist[i]);
                Modelo.addRow(new Object[]{archivo.getName().substring(0,archivo.getName().length()-4)});
            }
            jLabelNumeroCanciones.setText("Numero de canciones: "+ Modelo.getRowCount());
        }else{
            jLabelNoCanciones.setText("No hay canciones en esta lista.");
            jLabelNumeroCanciones.setText("Numero de canciones: "+ Modelo.getRowCount());
        }
    }
    
    /**
     * Reproduce la cancion actual, cogiendo la ruta del vector de rutas
     * En caso de que no pueda abrir el fichero, lanza un error por pantalla (ventana emergente)
     * Selecciona en la tabla de canciones la cancion que se está reproduciendo
     */
    private void reproduceCancion() throws Exception{
        if(myReproductorAudio.AbrirFichero(rutas[cancionActual])){
            jTable1.setRowSelectionInterval(cancionActual,cancionActual);
            visiblePlayPausa(2);
            myReproductorAudio.Play();
        }else{
            errorAperturaCancion();
        }
    }
    
    /**
     * Elige una cancion aleatoria de las disponibles de la lista para reproducirla
     * Según la cancion que se vaya a reproducir, cambiará los botones oportunos (cancion ultima, boton siguiente inhabilitado)....
     * 
     */
    private void cancionAleatoria() {
        int aleatorio=-1;
        do{
            aleatorio = (int) (Math.random()*canciones.size());
        }while(aleatorio == cancionActual);
        
        if(aleatorio == 0){
            jAnteriorButton.setEnabled(false);
            jMenuAnterior.setEnabled(false);
        }else if(aleatorio == canciones.size()-1){
            jSiguienteButton.setEnabled(false);
            jMenuSiguiente.setEnabled(false);
        }else{
            jSiguienteButton.setEnabled(true);
            jMenuSiguiente.setEnabled(true);
            jMenuAnterior.setEnabled(true);
            jAnteriorButton.setEnabled(true);
        }
        
        cancionActual = aleatorio;
        try {
            reproduceCancion();
        } catch (Exception ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Vuelve a reproducir la cancion actual, boton de repetir seleccionado
     */
    public void repetirCancion(){
        try {
            reproduceCancion();
        } catch (Exception ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Selecciona de la lista de canciones la siguiente a reproducir
     * Teniendo en cuenta que:
     * Si he llegado al final de la lista o me quedan mas canciones por reproducir
     * Se habilitarán y desabilitarán los botones correspondientes
     */
    public void siguienteCancion(){
        try {
            if(cancionActual != canciones.size()-1){

                actualPlaylist=-1;
                cancionActual++;
                llenarTabla();
                jAnteriorButton.setEnabled(true);
                jMenuAnterior.setEnabled(true);
                
                cambiaBotonesPlaylists(actualPlaylist);
                jLabelPlaylist.setText(jMenuPlayDef.getText());
                
                reproduceCancion();
            }
            //compruebo de nuevo porque la cancionActual ha cambiado y puede ser la ultima
            if(cancionActual == canciones.size()-1){
                jSiguienteButton.setEnabled(false);
                jMenuSiguiente.setEnabled(false);
            }
            
        } catch (Exception ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Selecciona de la lista la cancion anterior a la cancion actual siempre y cuando no esté en la primera cancion
     */
    public void anteriorCancion(){
        try {
            if(cancionActual != 0){
                cancionActual--;
                llenarTabla();
                jSiguienteButton.setEnabled(true);
                jMenuSiguiente.setEnabled(true);

                actualPlaylist=-1;
                cambiaBotonesPlaylists(actualPlaylist);
                jLabelPlaylist.setText(jMenuPlayDef.getText());
                
                reproduceCancion();
            }
                
            //compruebo de nuevo porque la cancionActual ha cambiado y puede ser la primera
            if(cancionActual == 0){
                jAnteriorButton.setEnabled(false);
                jMenuAnterior.setEnabled(false);
            }
        } catch (Exception ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Se para la reproduccion y selecciona la primera cancion para la reproduccion
     * Se activan y desactivan los botones correspondientes
     */
    public void stopCancion(){
        try {
            if(!canciones.isEmpty()){
                
                llenarTabla();
                visiblePlayPausa(1);
                cancionActual=0;
                myReproductorAudio.AbrirFichero(rutas[cancionActual]);
                jTable1.setRowSelectionInterval(cancionActual,cancionActual);
                jProgresoSlider.setValue(0);
                jTiempo1Label.setText(Funciones.tiempo(0));
                
                jAnteriorButton.setEnabled(false);
                jMenuAnterior.setEnabled(false);
                if(canciones.size() == 1){
                    jSiguienteButton.setEnabled(false);
                    jMenuSiguiente.setEnabled(false);
                    jStopButton.setEnabled(false);
                }else{
                    jSiguienteButton.setEnabled(true);
                    jMenuSiguiente.setEnabled(true);
                }
                
                
                actualPlaylist=-1;
                cambiaBotonesPlaylists(actualPlaylist);
                jLabelPlaylist.setText(jMenuPlayDef.getText());
                
                myReproductorAudio.Stop();
            }
        } catch (Exception ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Se hacen visibles o invisibles los botones de play o pausa 
     */
    public void visiblePlayPausa(int n){
        if(n == 1){
            jPausaButton.setVisible(false);
            jMenuPausa.setEnabled(false);
            
            jPlayButton.setVisible(true);
            jMenuReproducir.setEnabled(true);
        }else if(n==2){
            jPausaButton.setVisible(true);
            jMenuPausa.setEnabled(true);

            jPlayButton.setVisible(false);
            jMenuReproducir.setEnabled(false);
        }
    }
    
    /**
     * Si estamos en la lista por defecto, serán invisibles los botones de gestion de play lists
     * para el caso contrario serán visibles
     * @param bool Valor booleano representando la visibillidad de los botones
     */
    public void visibleBotonesPlaylists(boolean bool){
        jButton1.setVisible(bool);
        jButton2.setVisible(bool);
        jButton3.setVisible(bool);
        jButton4.setVisible(bool);
        jButton6.setVisible(bool);
    }
    
    /**
     * Inicializa todos los botones de nuestro reproductor
     */
    public void inicializaBotones(){
        jPlayButton.setEnabled(false);
        jStopButton.setEnabled(false);
        jAgregarCancionMenuItem.setEnabled(false);
        jAgregarCarpetaMenuItem.setEnabled(false);
        visiblePlayPausa(1);
        jProgresoSlider.setValue(0);
        jProgresoSlider.setOpaque(false);
        jSiguienteButton.setEnabled(false);
        jAnteriorButton.setEnabled(false);
        
        jMenuAnterior.setEnabled(false);
        jMenuSiguiente.setEnabled(false);
        jMenuReproducir.setEnabled(false);
        jMenuPausa.setEnabled(false);
        jMenuStop.setEnabled(false);
        
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
        jButton4.setEnabled(false);
        visibleBotonesPlaylists(false);
        
        jLabelPlaylist.setText(jMenuPlayDef.getText());
        jTiempo2Label.setText(Funciones.tiempo(0));
        jTiempo1Label.setText(Funciones.tiempo(0));
        
        jVolumenSlider.setOpaque(false);
    }
    
    /**
     * activa o descativa los botones de gestion de play lists de acuerdo con el numero de canciones que tengan
     * Por ejemplo: Si no hay canciones, no se puede borrar la lista
     *              Si no hay canciones en la lista principal, no se pueden agregar canciones de la lista principal
     */
    public void cambiaBotonesPlaylists(int actualPlaylist){
        if(actualPlaylist != -1){
            int numElementos = Funciones.numLineasFich("playlist"+actualPlaylist+".txt");
            if(numElementos>0){
                jButton4.setEnabled(true);
                jButton3.setEnabled(true);
            }else{
                jButton4.setEnabled(false);
                jButton3.setEnabled(false);
            }
            
            if(canciones.size() > 0){
                jButton1.setEnabled(true);
            }else{
                jButton1.setEnabled(false);
            }
            jButton2.setEnabled(true);
        }else{
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            jButton3.setEnabled(false);
            jButton4.setEnabled(false);
        }
    }
    
    /**
     * Al iniciar la aplicacion, se crean los ficheros para las play lists (si no estubieran creados)
     */
    public void inicializaPlaylists(){
        for(int i=0; i<11; i++){
            Funciones.aniadirPlaylists("playlist"+i+".txt");
        }
    }
    
    /**
     * Cambia el nombre de una play lists, y guarda el nombre en un fichero para futuras ejecuciones del programa 
     */
    public void cambiaNombrePlaylist(int opcion){
        //opcion = 1 -> renombrar con nombre por defecto
        //opcion = 2 -> renombrar introduciendo texto
        
        String nombre = "Playlist "+actualPlaylist;
        
        if(opcion == 2){
            JFrame frame = new JFrame();
                nombre = JOptionPane.showInputDialog(frame, "Cambiar nombre a la Playlist","Playlist "+actualPlaylist);
                if(nombre == null || nombre.isEmpty()){
                    nombre = "Playlist "+actualPlaylist;
            }
        }
        
        jLabelPlaylist.setText(nombre);
        switch(actualPlaylist){
            case 1:
                jMenuPlay1.setText(nombre);
                break;
            case 2:
                jMenuPlay2.setText(nombre);
                break;
            case 3:
                jMenuPlay3.setText(nombre);
                break;
            case 4:
                jMenuPlay4.setText(nombre);
                break;
            case 5:
                jMenuPlay5.setText(nombre);
                break;
            case 6:
                jMenuPlay6.setText(nombre);
                break;
            case 7:
                jMenuPlay7.setText(nombre);
                break;
            case 8:
                jMenuPlay8.setText(nombre);
                break;
            case 9:
                jMenuPlay9.setText(nombre);
                break;
        }
        String nombresPlaylists[] = new String[10];
        
        nombresPlaylists[0] = jMenuPlay1.getText();
        nombresPlaylists[1] = jMenuPlay2.getText();
        nombresPlaylists[2] = jMenuPlay3.getText();
        nombresPlaylists[3] = jMenuPlay4.getText();
        nombresPlaylists[4] = jMenuPlay5.getText();
        nombresPlaylists[5] = jMenuPlay6.getText();
        nombresPlaylists[6] = jMenuPlay7.getText();
        nombresPlaylists[7] = jMenuPlay8.getText();
        nombresPlaylists[8] = jMenuPlay9.getText();
        
        Funciones.guardaNombrePlaylists(nombresPlaylists);
    }
    
    /**
     * Inicializa el nombre de las play lists de acuerd con el nombre que haya sido guardado anteriormente
     * Los nombres están guardados en un fichero de texto
     */
    public void inicializaNombrePlaylists(){
        String nombresPlaylists[] = Funciones.leerFichero("nombrePlaylists.txt");
        
        if(nombresPlaylists.length == 10){
            jMenuPlay1.setText(nombresPlaylists[0]);
            jMenuPlay2.setText(nombresPlaylists[1]);
            jMenuPlay3.setText(nombresPlaylists[2]);
            jMenuPlay4.setText(nombresPlaylists[3]);
            jMenuPlay5.setText(nombresPlaylists[4]);
            jMenuPlay6.setText(nombresPlaylists[5]);
            jMenuPlay7.setText(nombresPlaylists[6]);
            jMenuPlay8.setText(nombresPlaylists[7]);
            jMenuPlay9.setText(nombresPlaylists[8]);
        }
    }
    
    /**
     * Comprueba la ruta de una cancion antes de su apertura
     */
    public void comprobarRutas(){
        for(int i=0; i<rutas.length; i++){
            if(!myReproductorAudio.AbrirFichero(rutas[i])){
                errorAperturaCancion();
                break;
            }
        }
    }
    
    /**
     * Lanza una ventana emergente al producirse un error en la apertura de una cancion
     * Devuelve el numero de elementos que han podido abrirse con éxito
     * 
     */
    public void errorAperturaCancion(){       
        String aux[] = new String[rutas.length];
        int numElementos=0;
        int j=0;
        for(int i=0; i<rutas.length; i++){
            if(myReproductorAudio.AbrirFichero(rutas[i])){
                aux[j] = rutas[i];
                j++;
                numElementos++;
            }
        }
        
        String aux2[] = new String[numElementos];
        for(int i=0; i<numElementos; i++){
            aux2[i] = aux[i];
        }
        
        rutas = aux2;
        if(rutas.length != 0){
            stopCancion();
            canciones.clear();
            canciones.addAll(Arrays.asList(rutas));
            llenarTabla();
            cancionActual = 0;
            jTable1.setRowSelectionInterval(cancionActual,cancionActual);
        }else{
            canciones.clear();
            llenarTabla();
        }
        
        JFrame frame = new JFrame();
        JOptionPane.showMessageDialog(frame, "Error en la apertura del fichero, puede que haya modificado la ruta \n Se han abierto " + numElementos +" canciones.","Error",JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Inicializa el preset por defecto del ecualizador
     */
    private void inicializaEcualizador() {
        for(int i=0; i<10; i++){
            eqFloat[i] = 0;
        }
    }
    
    /**
     * Llena los jLabel de informacion de la cancion de acuerdo con los datos de la cancion
     * (autor, titulo, album,año)
     */
    public void actualizaDatosCancion(){
        if(myReproductorAudio.titulo == null){
            jLabelTitulo.setText("Título: sin información");
        }else{
            jLabelTitulo.setText("Título: "+myReproductorAudio.titulo);
        }
        if(myReproductorAudio.autor == null){
            jLabelArtista.setText("Artista: sin información");
        }else{
            jLabelArtista.setText("Artista: "+myReproductorAudio.autor);
        }
        if(myReproductorAudio.album == null){
            jLabelAlbum.setText("Álbum: sin información");
        }else{
            jLabelAlbum.setText("Álbum: "+myReproductorAudio.album);
        }
        if(myReproductorAudio.anio== null){
            jLabelAnio.setText("Año: sin informacion");
        }else{
            jLabelAnio.setText("Año: "+myReproductorAudio.anio);
        }
        
        if(canciones.size() == 0){
            jLabelTitulo.setText("Título:");
            jLabelArtista.setText("Artista:");
            jLabelAlbum.setText("Álbum:");
            jLabelAnio.setText("Año:");
        }
    }
    
    @Override
    public void opened(Object o, Map map) {
       if (map.containsKey("audio.length.bytes")) {
            tama =(int)(Double.parseDouble(map.get("audio.length.bytes").toString())/1024);
            jProgresoSlider.setMaximum(tama);
        }
        
    }
    
    @Override
    public void progress(int i, long l, byte[] bytes, Map map) {
            
            float progressUpdate = (float) (i/tama);
            int progressNow = (int)(tama * progressUpdate)/1024;
            jProgresoSlider.setValue(progressNow);
            
            long totalReproduccion = myReproductorAudio.duracion-1;
            long llevaReproducido = ((totalReproduccion+1)*progressNow)/tama;
            
            jTiempo2Label.setText(Funciones.tiempo(totalReproduccion));
            jTiempo1Label.setText(Funciones.tiempo(llevaReproducido));
            
            ecualizador=(float[])map.get("mp3.equalizer");
            System.arraycopy(eqFloat, 0, ecualizador, 0, ecualizador.length);
            myReproductorAudio.Balance(myReproductorAudio.balance);
            
            //al finalizar una cancion pasa a la siguiente
            if(llevaReproducido == totalReproduccion){
                try {
                    jProgresoSlider.setValue(0);
                    jTiempo1Label.setText(Funciones.tiempo(0));
                    
                    if(cancionActual != canciones.size()-1 || jAleatorioToggleButton.isSelected()){
                        if(jRepetirToggleButton.isSelected()){
                            repetirCancion();
                        }else if(jAleatorioToggleButton.isSelected()){
                            cancionAleatoria();
                        }else if(!canciones.isEmpty()){
                            siguienteCancion();
                        }
                    }else if(jRepetirToggleButton.isSelected()){
                            repetirCancion();
                    }else{
                        try {
                            cancionActual=0;
                            myReproductorAudio.AbrirFichero(rutas[cancionActual]);
                            jTable1.setRowSelectionInterval(cancionActual,cancionActual);
                            jSiguienteButton.setEnabled(false);
                            jAnteriorButton.setEnabled(false);
                            jStopButton.setEnabled(false);
                            visiblePlayPausa(1);

                            myReproductorAudio.Stop();
                        } catch (Exception ex) {
                            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    myReproductorAudio.player.wait();
                } catch (InterruptedException ex) {
                    Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
    }

    @Override
    public void stateUpdated(BasicPlayerEvent bpe) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setController(BasicController bc) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }    

}

